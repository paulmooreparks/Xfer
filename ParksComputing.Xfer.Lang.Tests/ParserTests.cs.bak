using Microsoft.VisualStudio.TestTools.UnitTesting;
using ParksComputing.Xfer.Lang;
using ParksComputing.Xfer.Lang.Elements;
using ParksComputing.Xfer.Lang.Services;
using System.Text;

namespace ParksComputing.Xfer.Lang.Tests;

[TestClass]
public class ParserTests
{
    private Parser _parser = null!;

    [TestInitialize]
    public void Setup()
    {
        _parser = new Parser();
    }

    [TestMethod]
    public void Parse_EmptyObject_ReturnsValidDocument()
    {
        // Arrange
        var input = "{}";
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        Assert.IsNotNull(document.Root);
        Assert.IsInstanceOfType(document.Root, typeof(ObjectElement));
        Assert.IsFalse(document.HasError);
        Assert.IsFalse(document.HasWarnings);
    }

    [TestMethod]
    public void Parse_SimpleObject_ReturnsCorrectStructure()
    {
        // Arrange
        var input = """
        {
            name "Alice"
            age 30
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        Assert.IsInstanceOfType(document.Root, typeof(ObjectElement));
        var obj = (ObjectElement)document.Root;
        Assert.AreEqual(2, obj.Dictionary.Count);
        Assert.IsTrue(obj.Dictionary.ContainsKey("name"));
        Assert.IsTrue(obj.Dictionary.ContainsKey("age"));
    }

    [TestMethod]
    public void Parse_NestedObjects_ReturnsCorrectStructure()
    {
        // Arrange
        var input = """
        {
            person {
                name "Alice"
                address {
                    street "123 Main St"
                    city "Springfield"
                }
            }
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        var root = (ObjectElement)document.Root;
        Assert.IsTrue(root.Dictionary.ContainsKey("person"));

        var person = (ObjectElement)root.Dictionary["person"].Value;
        Assert.IsTrue(person.Dictionary.ContainsKey("address"));

        var address = (ObjectElement)person.Dictionary["address"].Value;
        Assert.IsTrue(address.Dictionary.ContainsKey("street"));
        Assert.IsTrue(address.Dictionary.ContainsKey("city"));
    }

    [TestMethod]
    public void Parse_Arrays_ReturnsCorrectStructure()
    {
        // Arrange
        var input = """
        {
            numbers [1, 2, 3, 4, 5]
            names ["Alice", "Bob", "Charlie"]
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        var root = (ObjectElement)document.Root;
        Assert.IsTrue(root.Dictionary.ContainsKey("numbers"));
        Assert.IsTrue(root.Dictionary.ContainsKey("names"));

        var numbers = (ArrayElement)root.Dictionary["numbers"].Value;
        Assert.AreEqual(5, numbers.Count);

        var names = (ArrayElement)root.Dictionary["names"].Value;
        Assert.AreEqual(3, names.Count);
    }

    [TestMethod]
    public void Parse_DifferentDataTypes_HandlesCorrectly()
    {
        // Arrange
        var input = """
        {
            stringValue "Hello World"
            intValue 42
            floatValue 3.14
            boolValue true
            nullValue null
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        var root = (ObjectElement)document.Root;

        Assert.IsInstanceOfType(root.Dictionary["stringValue"].Value, typeof(TextElement));
        Assert.IsInstanceOfType(root.Dictionary["intValue"].Value, typeof(IntegerElement));
        Assert.IsInstanceOfType(root.Dictionary["floatValue"].Value, typeof(DoubleElement));
        Assert.IsInstanceOfType(root.Dictionary["boolValue"].Value, typeof(BooleanElement));
        // Note: NullElement is not accessible, so we skip null value test
    }

    [TestMethod]
    public void Parse_WithProcessingInstructions_IncludesInDocument()
    {
        // Arrange
        var input = """
        <? xfer "1.0" ?>
        {
            name "Alice"
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        // Note: Processing instruction handling depends on specific implementation
        // Assert.IsTrue(document.Root.Children.Any(c => c is ProcessingInstruction));
    }

    [TestMethod]
    public void Parse_WithComments_IgnoresComments()
    {
        // Arrange
        var input = """
        </ This is a comment />
        {
            name "Alice" </ Another comment />
        }
        """;
        var bytes = Encoding.UTF8.GetBytes(input);

        // Act
        var document = _parser.Parse(bytes);

        // Assert
        Assert.IsNotNull(document);
        Assert.IsFalse(document.HasError);
        var root = (ObjectElement)document.Root;
        Assert.IsTrue(root.Dictionary.ContainsKey("name"));
    }
}
