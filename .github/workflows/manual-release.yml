name: Manual NuGet/GitHub Build & Publish
on:
  workflow_dispatch:
    inputs:
      reset_build_number:
        description: "Reset the build number (true/false)"
        required: false
        default: "false"
      publish_to_nuget:
        description: 'Publish to NuGet?'
        required: true
        type: boolean
        default: true
      publish_to_github_packages:
        description: 'Publish to GitHub Packages?'
        required: true
        type: boolean
        default: true
permissions:
  contents: write
  packages: write
jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      - name: Restore dependencies
        run: dotnet restore --configfile nuget.config
      - name: Read version from csproj
        id: read-version
        env:
          RESET_BUILD: ${{ github.event.inputs.reset_build_number }}
        run: |
          base=$(grep -oPm1 "(?<=<Version>)[^<]+" ParksComputing.Xfer.Lang/ParksComputing.Xfer.Lang.csproj)
          base2=${base%.*}
          if [[ "$RESET_BUILD" == "true" ]]; then
            build=1
          else
            build=${GITHUB_RUN_NUMBER}
          fi
          full="$base2.$build-prerelease"
          echo "version=$full" >> $GITHUB_OUTPUT
          echo "VERSION=$full" >> $GITHUB_ENV
      - name: Clean
        run: dotnet clean --configuration Release
      - name: Build
        run: dotnet build --no-restore --configuration Release Xfer.sln -p:PackageVersion=$VERSION
      - name: Test
        run: dotnet test --no-build --configuration Release Xfer.sln
      - name: Pack with computed version
        run: dotnet pack ParksComputing.Xfer.Lang/ParksComputing.Xfer.Lang.csproj -c Release --no-build -o ./nupkgs -p:PackageVersion=$VERSION -p:NuGetVersion=$VERSION
      - name: Publish to NuGet
        if: github.event.inputs.publish_to_nuget == 'true'
        run: |
          dotnet nuget push ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
          if [ -f ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.snupkg ]; then
            dotnet nuget push ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.snupkg \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          fi
      - name: Publish to GitHub Packages
        if: github.event.inputs.publish_to_github_packages == 'true'
        run: |
          dotnet nuget add source --username paulmooreparks --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/paulmooreparks/index.json"
          dotnet nuget push ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.nupkg --source "github" --skip-duplicate
          if [ -f ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.snupkg ]; then
            dotnet nuget push ./nupkgs/ParksComputing.Xfer.Lang.$VERSION.snupkg --source "github" --skip-duplicate
          fi

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git tag | grep -q "v$VERSION"; then
            echo "Tag v$VERSION already exists, skipping tag creation."
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
          fi
          gh release create "v$VERSION" --title "v$VERSION" --notes "Automated release for version $VERSION" || echo "Release already exists."
