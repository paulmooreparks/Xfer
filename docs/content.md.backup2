---
title: "XferLang Documentation"
description: "Complete documentation for XferLang - a structured data format with strong typing and processing instructions"
---

# XferLang Documentation

**XferLang** is a structured data format designed for configuration, data exchange, and content markup. It combines the simplicity of JSON with powerful features like strong typing, processing instructions, and character element definitions.

## Quick Start

### Basic Structure
```xfer
// Simple data structure
person {
    name: "John Smith"
    age: 30
    active: true
}
```

### With Schema Validation
```xfer
schema "person.xfer"

person {
    name: "John Smith"
    age: 30
    active: true
}
```

## XferLang Elements

XferLang provides several fundamental element types that form the building blocks of any XferLang document.

### Text Elements

Text elements represent string data and are the most basic content type in XferLang.

**Syntax:**
- `"quoted text"` - Standard quoted strings
- `'single quoted'` - Alternative quoting
- `unquoted_text` - Simple identifiers without spaces

**Examples:**
```xfer
title: "Hello World"
message: 'Welcome to XferLang'
status: active
```

**Use Cases:**
- Configuration values
- Human-readable content
- Identifiers and keys
- File paths and URLs

### Numeric Elements

Numeric elements support integers, decimals, and scientific notation with automatic type inference.

**Syntax:**
- `42` - Integers
- `3.14159` - Decimals
- `1.23e-4` - Scientific notation
- `-273.15` - Negative numbers

**Examples:**
```xfer
port: 8080
pi: 3.14159
temperature: -273.15
avogadro: 6.022e23
```

**Use Cases:**
- Configuration parameters
- Mathematical constants
- Measurements and quantities
- Database IDs and counters

### Boolean Elements

Boolean elements represent true/false values with case-insensitive keywords.

**Syntax:**
- `true` / `True` / `TRUE`
- `false` / `False` / `FALSE`

**Examples:**
```xfer
enabled: true
debug: false
production: True
```

**Use Cases:**
- Feature flags
- Configuration switches
- Status indicators
- Validation results

### Null Elements

Null elements represent the absence of a value, similar to null in JSON or None in Python.

**Syntax:**
- `null` / `Null` / `NULL`

**Examples:**
```xfer
optional_field: null
cache_timeout: null
```

**Use Cases:**
- Optional configuration
- Placeholder values
- Database null fields
- Conditional data

### Block Elements

Block elements create hierarchical structures containing nested key-value pairs.

**Syntax:**
```xfer
block_name {
    key1: value1
    key2: value2
    nested_block {
        inner_key: inner_value
    }
}
```

**Examples:**
```xfer
database {
    host: "localhost"
    port: 5432
    credentials {
        username: "admin"
        password: "secret"
    }
}

server {
    name: "web-01"
    resources {
        cpu: 4
        memory: "8GB"
        storage: "500GB"
    }
}
```

**Use Cases:**
- Configuration sections
- Nested data structures
- Object representation
- Hierarchical organization

### Array Elements

Array elements contain ordered collections of values, supporting mixed types within the same array.

**Syntax:**
```xfer
array_name [
    value1,
    value2,
    value3
]
```

**Examples:**
```xfer
ports [80, 443, 8080]
servers ["web-01", "web-02", "db-01"]
mixed_data [
    "string",
    42,
    true,
    null,
    { nested: "object" }
]
```

**Use Cases:**
- Lists of configuration items
- Multiple values for a single key
- Ordered data collections
- Multi-type data structures

### Character Elements

Character elements define special Unicode characters using decimal notation, perfect for symbols and special formatting.

**Syntax:**
- `\decimal_value` - Unicode character by decimal code point

**Examples:**
```xfer
bullet: \8226      // •
arrow: \8594       // →
checkmark: \10003  // ✓
copyright: \169    // ©
degree: \176       // °
```

**Use Cases:**
- Special symbols in content
- Formatting characters
- Unicode symbols
- Mathematical notation
- Custom markers and bullets

### Processing Instructions

Processing instructions provide metadata and directives for document processing, similar to XML processing instructions but with simpler syntax.

**Syntax:**
```xfer
<?instruction_name parameter1 parameter2?>
```

**Examples:**
```xfer
<?xml-stylesheet type="text/xsl" href="transform.xsl"?>
<?encoding utf-8?>
<?version 1.0?>
<?custom-directive debug=true output=console?>
```

**Use Cases:**
- Document metadata
- Processing directives
- Tool configuration
- Integration instructions
- Custom application logic

## Schema System

XferLang supports schema validation to ensure data integrity and structure.

### Schema Declaration
```xfer
schema "path/to/schema.xfer"
```

### Schema Definition Example
```xfer
// person.xfer schema
person {
    name: string required
    age: number min=0 max=150
    email: string format=email
    active: boolean default=true
}
```

## Processing Instructions Reference

### Built-in Processing Instructions

**Document Encoding:**
```xfer
<?encoding utf-8?>
```

**Version Declaration:**
```xfer
<?version 1.0?>
```

**Include External Files:**
```xfer
<?include "external.xfer"?>
```

**Custom Processing:**
```xfer
<?process-data transform=normalize output=json?>
```

## Best Practices

### Structure Organization
- Use meaningful block names
- Group related configuration items
- Maintain consistent indentation
- Add comments for complex sections

### Data Types
- Use appropriate types (don't quote numbers)
- Leverage character elements for symbols
- Use null for truly optional values
- Consider arrays for multiple related items

### Schema Usage
- Define schemas for complex data structures
- Use validation constraints appropriately
- Document schema requirements
- Version your schemas

### Processing Instructions
- Place document-level PIs at the top
- Use consistent naming conventions
- Document custom PI behavior
- Consider compatibility with tools

## Advanced Features

### Comments
```xfer
// Single line comment
/* Multi-line
   comment */
```

### Complex Nesting
```xfer
application {
    name: "MyApp"

    database {
        primary {
            host: "db1.example.com"
            port: 5432
        }
        replicas [
            { host: "db2.example.com", port: 5432 },
            { host: "db3.example.com", port: 5432 }
        ]
    }

    features {
        authentication: true
        logging: {
            level: "info"
            outputs ["console", "file"]
        }
    }
}
```

### Integration Examples

**Configuration File:**
```xfer
<?version 1.0?>
schema "app-config.xfer"

app_config {
    server {
        host: "0.0.0.0"
        port: 8080
        ssl: true
    }

    database {
        driver: "postgresql"
        connection_string: "postgresql://user:pass@localhost/db"
        pool_size: 20
    }

    features {
        rate_limiting: true
        caching: {
            enabled: true
            ttl: 3600
            backend: "redis"
        }
    }
}
```

**Data Exchange:**
```xfer
user_profile {
    id: 12345
    username: "johndoe"
    display_name: "John Doe"

    preferences {
        theme: "dark"
        notifications: true
        language: "en-US"
    }

    permissions ["read", "write", "admin"]

    metadata {
        created_at: "2024-01-15T10:30:00Z"
        last_login: "2024-12-02T14:22:15Z"
        login_count: 247
    }
}
```

## Tools and Libraries

- **xferc** - Command-line compiler and REPL
- **ParksComputing.Xfer.Lang** - .NET library for parsing and generation
- **VS Code Extension** - Syntax highlighting and language support

---

*Generated on {GenerationDate}*
