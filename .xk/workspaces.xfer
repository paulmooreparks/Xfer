</ This file is written in XferLang. You may learn more about the syntax at this link:
https://github.com/paulmooreparks/Xfer/blob/master/ParksComputing.Xfer.Lang/README.md />

{
    assemblies [
    ]

    </ activeWorkspace "httpbin" />

    </ These are global variables that may be referenced in scripts and configuration. />
    properties {
        sampleValue "This is a sample value"
        startWorkspace "httpbin"
        baseLevel "global"
    }

    initScript <'
        var clr = host.lib('mscorlib', 'System', 'System.Core');
        var Dictionary = clr.System.Collections.Generic.Dictionary;
        var Environment = clr.System.Environment;

        var xferLang = host.lib('ParksComputing.Xfer.Lang');

        var startWorkspace = xk.startWorkspace;
        // var startWorkspace = xk.store.get("startWorkspace");

        if (startWorkspace != null) {
            xk.setActiveWorkspace(startWorkspace);
        }

        function formatJson(rawJson) {
            let obj = JSON.parse(rawJson);
            return JSON.stringify(obj, null, 2); // 2 = indentation spaces
        }

        function sayHello() {
            console.log("Hello from globalInitScript.js");
            return "";
        }
    '>

    macros {
    }

    scripts {
        sample {
            description "An example of a top-level named script."

            arguments {
                arg1 {
                    type "string"
                    description "(string) The first argument."
                    isRequired ~true
                }
                arg2 {
                    type "number"
                    description"(number) The second argument."
                }
                arg3 {
                    type "boolean" 
                    description "(boolean) The third argument."
                }
            }

            script <'
                log("Global script is executed.");
                log("arg1: " + arg1);
                log("arg2: " + arg2);
                log("arg3: " + arg3);

                if (typeof arg2 === "number") {
                    return arg2 + 123;
                } else {
                    return null;
                }            
            '>
        }

        echo {
            description "Another way to do output."

            arguments {
                obj {
                    type "object"
                    description "The object to echo."
                }
            }

            script <'
                log(obj.toString())
            '>
        }

        notepad {
            description "Start notepad."

            script <'
                let path = `c:/users/paul`;
                xk.process.run("notepad.exe", path, "test.xfer");
            '>
        }
    }

    </ This is a global pre-request script that will be executed before each request. />
    preRequest <'
    '>

    </ This is a global post-request script that will be executed after each request completes. />
    postResponse <'
        return request.response.body;
    '>

    </ A workspace is a collection of related requests and associated configuration. />
    workspaces {

        httpbin {
            description "Calling various endpoints in the httpbin.org service."

            initScript <'
            '>

            properties {
                wsLevel "httpbin wsLevel"
                foo "bar"
            }

            macros {
            }

            baseUrl "https://httpbin.org/"

            scripts {
                test {
                    description "An example of a script that can be executed from the command line."

                    arguments {
                        arg1 {
                            type "string"
                            description "(string) The first argument."
                        }
                    }

                    script <'
                        log(workspace.name);
                        // log(workspace.requests.gettest.name);
                        let result = workspace.requests.gettest.execute(arg1);
                        return result;
                    '>
                }
            }

            </ These are requests that may be executed by name from the command line. />
            requests {
                cookies {
                    endpoint "/cookies"
                    method "GET"
                    cookies {
                        session-id "1234567"
                        session-token "abcdef"
                    }
                }

                setcookies {
                    endpoint "/cookies/set"
                    method "GET"
                    parameters (
                        'key1=value1'
                        'key2=value2'
                    )
                }

                gettest {
                    endpoint "/get"
                    method "GET"

                    properties {
                        reqLevel "gettest reqLevel"
                    }

                    arguments {
                        arg1 {
                            type "string"
                            description "(string) The first argument."
                        }
                        arg2 {
                            type "number"
                            description"(number) The second argument."
                        }
                        arg3 {
                            type "boolean" 
                            description "(boolean) The third argument."
                        }
                    }

                    </ Default headers to be sent with the request unless overridden. />
                    headers {
                        Accept "application/json"
                    }
                    
                    </ Default parameters to be sent with the request unless overridden. />
                    parameters (
                        'key1={{[arg]::arg1::key1}}'
                        'key1={{[file]::c:/users/paul/sample.txt::key2}}'
                        'key3={{[prop]::../../baseLevel::key3}}'
                        'key4={{[prop]::/parkscomputing/wsLevel::key4}}'
                        'key5={{[prop]::/parkscomputing/about/reqLevel::key5}}'
                        'boo'
                    )

                    preRequest <'
                        log("This is the httpbin.gettest pre-request handler");
                        // Delegate to upstream pre-request handler
                        nextHandler();
                        '>

                    postResponse <'
                        // Delegate to upstream post-request handler
                        return nextHandler();
                    '>
                }
                posttest {
                    properties {
                        reqLevel "posttest regLevel"
                    }

                    endpoint "/post"
                    method "POST"
                    headers {
                        Content-Type "application/json"
                    }
                    payload <'{ "key1": "value1", "key2": "value2"} '>
                }

                basic {
                    endpoint '/basic-auth/{{[env]::httpBinBasicAuthUser}}/{{[env]::httpBinBasicAuthPassword}}'
                    method "GET"

                    preRequest <'
                        var basicAuth = btoa("<|httpBinBasicAuthUser|>:<|httpBinBasicAuthPassword|>");
                        request.headers["Authorization"] = "Basic " + basicAuth;
                        nextHandler();
                    '>
                }

                bearer {
                    endpoint "/bearer"
                    method "GET"
                    headers {
                        </ The httpBinBearerToken environment variable is set in the .xk/.env file. />
                        Authorization 'Bearer {{[env]::httpBinBearerToken}}'
                    }
                }
            }
        }

        foo {
            extend "httpbin"
            description "An example of extending an existing workspace, in this case the httpbin workspace."

            properties {
                foo "baz"
            }

            requests {
                gettest {
                    parameters (
                        'key3=value1'
                        'key4=value2'
                        'yah'
                    )

                    preRequest <'
                        log("This is the foo.gettest pre-request handler");
                        // Delegate to base pre-request handler
                        baseHandler();
                    '>

                    postResponse <'
                        return request.response.body;
                    '>
                }
            }
        }

        parkscomputing {
            description "Making calls to the Parks Computing website."

            properties {
                wsLevel "parkscomputing wsLevel"
            }

            baseUrl "https://parkscomputing.com/"
            requests {
                about {
                    properties {
                        reqLevel "parkscomputing.about regLevel"
                    }

                    endpoint "/content/about.html"
                    method "GET"
                }
            }
        }
    }
}